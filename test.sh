#!/bin/bash

readonly DASHBOARD_BASE_URL="$(jq -r '.tyk.dashboard.host' config.json)"
readonly DASHBOARD_API_TOKEN="$(jq -r '.tyk.dashboard.token' config.json)"
readonly GATEWAY_BASE_URL="$(jq -r '.tyk.gateway.host' config.json)"
readonly GATEWAY_API_TOKEN="$(jq -r '.tyk.gateway.token' config.json)"
readonly TEST_SUMMARY_PATH="output/rl-test-output-summary"
readonly TEST_DETAIL_PATH="output/rl-test-output-detail"
export_analytics=false
show_detail=false

while getopts "de" opt; do
  case ${opt} in
    d ) 
        show_detail=true
        echo "Detailed analytics will be displayed"
      ;;
    e ) 
        export_analytics=true
        echo "Analytics data will be exported"
      ;;
    \? ) 
        echo "Invalid option: -$OPTARG" 1>&2
        exit 1
      ;;
  esac
done

shift $((OPTIND -1))
test_plans_to_run=("$@")

if [ ${#test_plans_to_run[@]} -eq 0 ]; then
  echo "No tests to run. Provide test plan names as arguments. e.g. ./test.sh tp001"
  exit 0
fi

generate_requests() {
    local clients="$1"
    local requests_per_second="$2"
    local requests_total="$3"
    local target_url="$4"
    local api_key="$5"
    hey -c "$clients" -q "$requests_per_second" -n "$requests_total" -H "Authorization: $api_key" "$target_url" 1> /dev/null
}

get_key_test_data() {
    local key_path="$1"
    echo "$(jq '.access_rights[] | { rate: .limit.rate, per: .limit.per }' $keypath)"
}

get_analytics_data() {
    local api_id="$1"
    local from_epoch="$2"
    local request_count="$3"
    local analytics_url="$DASHBOARD_BASE_URL/api/logs/?start=$from_epoch&p=-1&api=$api_id"
    local data=""
    local analytics_count=0

    while [ "$analytics_count" -ne "$request_count" ]; do
        data=$(curl -s -H "Authorization: $DASHBOARD_API_TOKEN" $analytics_url)
        analytics_count=$(jq '.data | length' <<< "$data")
        
        # check that there is equivalent amount of analytics records to API requests sent
        if [ "$analytics_count" -ne "$request_count" ]; then
            # pause, to allow time for analytics data to be processed
            sleep 1
        fi
    done

    echo "$data"
}

# clear the test output files
> $TEST_SUMMARY_PATH
> $TEST_DETAIL_PATH
test_plan_run=false

for test_plan in "${test_plans_to_run[@]}"; do
    test_plan_path="test-plans/$test_plan.json"
    test_plan_file_name=$(basename "${test_plan_path%.*}")

    if [ ! -e "$test_plan_path" ]; then
        echo "Test plan $test_plan_path does not exist"
        continue
    fi

    test_plan_run=true

    # test_data_source=$(jq -r '.dataSource' $test_plan_path)
    key_file_path=$(jq -r '.import.key' $test_plan_path)
    api_file_path=$(jq -r '.import.api' $test_plan_path)
    # TODO: This approach 'first' is a hack to deal with keys that have multiple authz configs.
    # It needs to be updates to get the correct authz config for the api that is to be tested against.
    # It only happens to work here because the first rate limit is the same as the API to be tested against.
    key_rate=$(jq 'first(.access_rights[] | .limit.rate)' $key_file_path)
    key_rate_period=$(jq 'first(.access_rights[] | .limit.per)' $key_file_path)
    analytics_data=""

    echo -e "\nRunning test plan \"$test_plan_file_name\""

    target_authorization=$(jq -r '.target.authorization' $test_plan_path)
    target_url=$(jq -r '.target.url' $test_plan_path)
    target_api_id=$(jq -r '.target.apiId' $test_plan_path)
    target_authorization=$(jq -r '.target.authorization' $test_plan_path)
    load_clients=$(jq '.target.load.clients' $test_plan_path)
    load_rate=$(jq '.target.load.rate' $test_plan_path)
    load_total=$(jq '.target.load.total' $test_plan_path)

    echo "Generating $load_total requests @ ${load_rate}rps at $target_url"

    # wait 2 seconds to ensure there is a reasonable gap between the batches of analytics records generated by different test plans
    sleep 2

    current_time=$(date +%s)
    generate_requests $load_clients $load_rate $load_total $target_url $target_authorization
    
    analytics_data=$(get_analytics_data $target_api_id $current_time $load_total)

    echo "Parsing data"
    parsed_data_file_path="output/rl-parsed-data-$test_plan_file_name.csv"
    jq -r '.data[] | [.ResponseCode, .TimeStamp] | join(" ")' <<< "$analytics_data" > $parsed_data_file_path

    echo "Analysing data"
    awk -v test_plan_file_name="$test_plan_file_name" \
        -v rate_limit="$key_rate" \
        -v rate_limit_period="$key_rate_period" \
        -v summary_data_path="$TEST_SUMMARY_PATH" \
        -f templates/rl-analysis-template.awk $parsed_data_file_path >> $TEST_DETAIL_PATH

    if [ "$export_analytics" == "true" ]; then
        echo "Exporting analytics data"
        echo "$analytics_data" > .context-data/rl-test-analytics-export-$test_plan_file_name.json
    fi
done

if [ "$test_plan_run" = "true" ]; then
    echo -e "\nTest plans complete"

    if [ "$show_detail" = "true" ]; then
        echo -e "\nDetailed Rate Limit Analysis"
        awk -f templates/test-output-detail-template.awk $TEST_DETAIL_PATH
    fi

    echo -e "\nSummary Results"
    awk -f templates/test-output-summary-template.awk $TEST_SUMMARY_PATH
else
  echo "No test plans were run"
fi
